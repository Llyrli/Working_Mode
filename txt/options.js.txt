// options.js — manage first-class fine categories, table toggle, and a "Clear all data" button.

const DEFAULTS = {
  apiKey: "",
  model: "gemini-2.0-flash",
  intervalMinutes: 5,
  timeZone: "America/Chicago",
  learnedRules: {},

  categoriesConfig: [
    { name: "work", umbrella: "work" },
    { name: "study", umbrella: "work" },
    { name: "utility", umbrella: "work" },
    { name: "social", umbrella: "rest" },
    { name: "entertainment", umbrella: "rest" },
    { name: "other", umbrella: "other" }
  ],

  pieRange: "1d",
  showCategoryTable: true,
  pairsCollapsed: false
};

function el(id){ return document.getElementById(id); }
function setStatus(msg){ const s=el("status"); if(s){ s.textContent = msg; setTimeout(()=>s.textContent="",1800);} }

document.addEventListener("DOMContentLoaded", () => {
  chrome.storage.sync.get(DEFAULTS, (cfg) => {
    el("apiKey").value = cfg.apiKey || "";
    el("model").value = cfg.model || DEFAULTS.model;
    el("interval").value = Number(cfg.intervalMinutes || DEFAULTS.intervalMinutes);
    el("tz").value = cfg.timeZone || DEFAULTS.timeZone;
    el("pieRange").value = cfg.pieRange || DEFAULTS.pieRange;
    el("showCategoryTable").checked = (cfg.showCategoryTable !== false);

    renderCats(cfg.categoriesConfig || []);
    renderLearned(cfg.learnedRules || {});
  });

  el("save").addEventListener("click", () => {
    const cfg = {
      apiKey: el("apiKey").value.trim(),
      model: el("model").value,
      intervalMinutes: Math.max(1, Number(el("interval").value || 5)),
      timeZone: el("tz").value.trim() || "UTC",
      pieRange: el("pieRange").value,
      showCategoryTable: !!el("showCategoryTable").checked
    };
    chrome.storage.sync.set(cfg, () => setStatus("Saved ✓"));
  });

  el("addCat").addEventListener("click", () => {
    const name = (el("catName").value || "").trim();
    const umbrella = el("catUmb").value;
    if (!name) return;
    chrome.storage.sync.get(DEFAULTS, (cfg)=>{
      const arr = cfg.categoriesConfig || [];
      if (!arr.find(x => (x.name||"").toLowerCase() === name.toLowerCase())) {
        arr.push({ name, umbrella });
        chrome.storage.sync.set({ categoriesConfig: arr }, ()=>{
          renderCats(arr);
          el("catName").value = "";
          setStatus("Category added");
        });
      } else setStatus("Already exists");
    });
  });

  el("clearAll").addEventListener("click", () => {
    if (!confirm("This will remove all saved usage stats (events and daily aggregates). Continue?")) return;
    chrome.runtime.sendMessage({ type:"CLEAR_ALL_DATA" }, (resp)=>{
      void chrome.runtime.lastError;
      if (resp?.ok) setStatus(`Cleared ${resp.cleared} keys ✓`);
      else setStatus("Clear failed");
    });
  });
});

/* Renders */
function renderCats(arr) {
  const box = el("catList");
  box.innerHTML = "";
  if (!arr || arr.length === 0) { box.innerHTML = `<div class="muted">No categories yet.</div>`; return; }

  const grid = document.createElement("div");
  grid.className = "grid";
  grid.innerHTML = `
    <div class="grid-head">Category</div>
    <div class="grid-head">Umbrella</div>
    <div class="grid-head">Color</div>
    <div class="grid-head"></div>
  `;
  arr.forEach((c, idx) => {
    const n = document.createElement("div"); n.textContent = c.name; grid.appendChild(n);

    const umb = document.createElement("div");
    umb.innerHTML = `<span class="pill ${c.umbrella}">${c.umbrella}</span>`;
    grid.appendChild(umb);

    const color = document.createElement("div");
    color.innerHTML = `<span style="display:inline-block;width:16px;height:16px;border-radius:3px;background:${colorFor(c.name)};"></span>`;
    grid.appendChild(color);

    const btns = document.createElement("div");
    const rm = document.createElement("button"); rm.textContent = "Remove";
    rm.onclick = () => {
      chrome.storage.sync.get(DEFAULTS, (cfg)=>{
        const arr = cfg.categoriesConfig || [];
        arr.splice(idx, 1);
        chrome.storage.sync.set({ categoriesConfig: arr }, ()=> { renderCats(arr); setStatus("Removed ✓"); });
      });
    };
    btns.appendChild(rm);
    grid.appendChild(btns);
  });
  box.appendChild(grid);
}

function renderLearned(map) {
  const box = el("learnedList");
  const entries = Object.entries(map || {});
  if (entries.length === 0) { box.innerHTML = `<div class="muted">No learned rules yet.</div>`; return; }
  box.innerHTML = "";
  for (const [domain, cat] of entries) {
    const row = document.createElement("div");
    row.style.display="flex"; row.style.alignItems="center"; row.style.gap="8px"; row.style.margin="4px 0";
    row.innerHTML = `
      <code style="min-width:200px;display:inline-block">${domain}</code>
      <span>${cat}</span>
      <button data-domain="${domain}">Remove</button>
    `;
    row.querySelector("button").onclick = () => {
      chrome.runtime.sendMessage({ type:"CLEAR_LEARNED_RULE", domain }, (resp)=>{
        void chrome.runtime.lastError;
        if (resp?.ok) {
          chrome.storage.sync.get(["learnedRules"], (s)=> renderLearned(s.learnedRules || {}));
        }
      });
    };
    box.appendChild(row);
  }
}

/* local color helper (same palette as popup) */
function colorFor(cat){
  const FIXED = { work:"#1f8f3e", study:"#2b6cb0", utility:"#b08b2b", social:"#cc7a00", entertainment:"#c53030", other:"#718096" };
  if (FIXED[cat]) return FIXED[cat];
  let h=0; for(let i=0;i<cat.length;i++) h=(h*31+cat.charCodeAt(i))>>>0; const hue=h%360; return `hsl(${hue} 55% 55%)`;
}
